
version: '3.8'

services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: youruser
      POSTGRES_PASSWORD: yourpassword
      POSTGRES_DB: yourdb
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-tier

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-tier

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - app-tier

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app-tier

  kafka-setup:
    image: wurstmeister/kafka:latest
    container_name: kafka-setup
    command: >
      /bin/sh -c "
      until kafka-topics.sh --list --bootstrap-server kafka:9092; do
        echo 'Waiting for Kafka to become available...';
        sleep 5;
      done &&
      kafka-topics.sh --create --topic task-queue-topic --bootstrap-server kafka:9092 --replication-factor 1 --partitions 1
      "
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app-tier

volumes:
  postgres-data:

networks:
  app-tier:
    driver: bridge